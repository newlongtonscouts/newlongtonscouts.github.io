# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Jekyll with GitHub Pages dependencies preinstalled

on:
  schedule:
    - cron: "1 0 * * *"

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Update Views job
  update-views:
    runs-on: ubuntu-latest
    steps:
        - name: Get View Data
          env:
            GOATCOUNTER_TOKEN: ${{ secrets.GOATCOUNTER_TOKEN }}
          run: |
            curl() {
            \command curl --silent \
            --header 'Content-Type: application/json' \
            --header "Authorization: Bearer $GOATCOUNTER_TOKEN" \
            "$@"
            }
            curl -X GET "https://newlongtonscouts.goatcounter.com/api/v0/stats/total" | sed -n '2p' | tr --delete , > _data/views.yml
            
        - name: Save View Data
          run: |
                git add _data/views.yml
                git commit -m "Updated Views Count."
                git push
  
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./
          destination: ./_site
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Auto Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
